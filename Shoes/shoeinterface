import tkinter
from tkinter import ttk
from tkinter import messagebox

def on_discount_type_select(event):
    selected_discount_type = discount_type_combobox.get()
    if selected_discount_type == "None":
        discount_amount_entry.config(state="disabled")
    else:
        discount_amount_entry.config(state="normal")

def on_tax_location_select(event):
    selected_tax_location = tax_location_combobox.get()
    if selected_tax_location in ["CT", "NOLA"]:
        tax_amount_spinbox.config(state="disabled")
    else:
        tax_amount_spinbox.config(state="normal")

def calculate_total_price(show_popup=True):
    retail_value = retail_price_entry.get()
    discount_amount_value = discount_amount_entry.get()
    discount_type = discount_type_combobox.get()

   # print("Retail:", retail_value)
    #print("Discount Amount:", discount_amount_value)
    #print("Discount Type:", discount_type)

    if retail_value.strip() == '' or discount_type.strip() == '':
        messagebox.showwarning(title="Error", message="Retail Price and Discount Type are required.")
        return

    if discount_type != "None" and discount_amount_entry.cget('state') != 'disabled':
        if discount_amount_value.strip() == '':
            messagebox.showwarning(title="Error", message="Discount Amount is required.")
            return

    try:
        retail = float(retail_value)
        
        if discount_type != "None" and discount_amount_entry.cget('state') != 'disabled':
            discount_amount = float(discount_amount_value)
        else:
            discount_amount = 0

        tax_location = tax_location_combobox.get()
        if tax_location == "CT":
            tax = 6.35
        elif tax_location == "NOLA":
            tax = 9.45
        elif tax_location == "Other" and tax_amount_spinbox.cget('state') != 'disabled':
            tax = float(tax_amount_spinbox.get())
        else:
            tax = 0  # Default tax if not specified

        print("Retail Float:", retail)
        print("Discount Amount Float:", discount_amount)

        # Calculating total price
        if discount_type == "Cash" or discount_type == "Both":
            discounted_price = retail - discount_amount
        elif discount_type == "Percent":
            percentage_discount_amount = (discount_amount / 100) * retail
            discounted_price = retail - percentage_discount_amount
        else:
            discounted_price = retail  # Assuming no discount
        
        tax_amount = discounted_price * (tax / 100)
        total_price = discounted_price + tax_amount

        if show_popup:
            messagebox.showinfo("Total Price", f"The total price is: {total_price}")
        return total_price #Return the calculated total price
    
    except ValueError as e:
        print(e)
        messagebox.showwarning(title="Error", message="Please enter valid numbers.")

        

def calculate_break_even():
    total_price = calculate_total_price(show_popup=False)
    if total_price is None:
        return
    try:
         # Fees for different platforms
        ebay_fee = 0.1325
        final_value_fee = 0.30
        stockx_fee = 0.09
        stockx_cashout_fee = 0.03
        stockx_shipping_fee = 4
        goat_fee = 0.095
        goat_cashout_fee = 0.029
        goat_seller_fee = 5
        

        # Your break-even calculations
        ebay_break_even = total_price / (1 - ebay_fee) + final_value_fee
        stockx_break_even = (total_price + stockx_shipping_fee) / (1 - stockx_fee - stockx_cashout_fee)
        goat_break_even = (total_price + goat_seller_fee) / (1 - goat_fee - goat_cashout_fee)


        messagebox.showinfo("Break Even Prices", f"eBay: {ebay_break_even}\nStockX: {stockx_break_even}\nGoat: {goat_break_even}")

    except ValueError:
        messagebox.showwarning(title="Error", message="Please enter valid numbers.")

def enter_data():
    accepted = accept_var.get()
    
    if accepted=="Accepted":
        # User info
        retail_price = retail_price_entry.get()
        discount_type = discount_amount_entry.get()
        
        if retail_price and discount_type:
            calculate_break_even() # pass total_price to calculate break even
        else:
            tkinter.messagebox.showwarning(title="Error", message="Retail Price and Discount Type are required.")
    else:
        tkinter.messagebox.showwarning(title= "Error", message="You have not accepted the terms")

window = tkinter.Tk()
window.title("Data Entry Form")

frame = tkinter.Frame(window)
frame.pack()

# Saving User Info
user_info_frame =tkinter.LabelFrame(frame, text="Retail Entry")
user_info_frame.grid(row= 0, column=0, padx=20, pady=10)

#Retail price Entry
retail_price_entry_label = tkinter.Label(user_info_frame, text="Retail Price")
retail_price_entry_label.grid(row=0, column=0)
retail_price_entry = tkinter.Entry(user_info_frame)
retail_price_entry.grid(row=1, column=0)

#Discount Entry
discount_frame = tkinter.LabelFrame(frame,text="Discount Entry")
discount_frame.grid(row=1, column=0, sticky="news", padx=20, pady=10)

#Discount Type
discount_type_label = tkinter.Label(discount_frame, text="Discount Type")
discount_type_combobox = ttk.Combobox(discount_frame, values=["", "Cash", "Percent", "Both", "None"])
discount_type_label.grid(row=2, column=0)
discount_type_combobox.grid(row=3, column=0)

#Discount Amount
discount_amount_label = tkinter.Label(discount_frame, text="Discount Amount")
discount_amount_label.grid(row=2, column=1)
discount_amount_entry = tkinter.Entry(discount_frame)
discount_amount_entry.grid(row=3, column=1)

for widget in user_info_frame.winfo_children():
    widget.grid_configure(padx=10, pady=5)

# Tax Info
courses_frame = tkinter.LabelFrame(frame,text="Tax Entry")
courses_frame.grid(row=3, column=0, sticky="news", padx=20, pady=10)

#Tax Location
tax_location_label = tkinter.Label(courses_frame, text="Tax Location")
tax_location_combobox = ttk.Combobox(courses_frame, values= ["","CT", "NOLA", "NY", "Other"])
tax_location_label.grid(row=0, column=1)
tax_location_combobox.grid(row=1, column=1)
#Tax Amount
tax_amount_label = tkinter.Label(courses_frame, text="Tax Amount")
tax_amount_spinbox = tkinter.Spinbox(courses_frame, from_=0, to=2000)
tax_amount_label.grid(row=0, column=3)
tax_amount_spinbox.grid(row=1, column=3)


# Accept terms
terms_frame = tkinter.LabelFrame(frame, text="Terms & Conditions")
terms_frame.grid(row=4, column=0, sticky="news", padx=20, pady=10)

accept_var = tkinter.StringVar(value="Not Accepted")
terms_check = tkinter.Checkbutton(terms_frame, text= "I accept the terms and conditions.",
                                  variable=accept_var, onvalue="Accepted", offvalue="Not Accepted")
terms_check.grid(row=0, column=0)

# Button for Costs
button = tkinter.Button(frame, text="Calculate Cost", command= calculate_total_price)
button.grid(row=5, column=0, sticky="news", padx=20, pady=10)


# Button for Break even
button = tkinter.Button(frame, text="Calculate Break Even", command=calculate_break_even)
button.grid(row=6, column=0, sticky="news", padx=20, pady=10)
 
window.mainloop()